pipeline {
    agent any
   
    stages {
        
         stage('Logging into AWS ECR') {
            steps {
                script {
                sh 'aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 443244066224.dkr.ecr.ap-southeast-1.amazonaws.com'
                }
                 
            }
        }
        
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'cc77ced0-95dd-4ff3-83cc-e993344ec312', url: 'https://github.com/namrata-aatmani/team.git']]])     
            }
        }
  
    // Building Docker images
    stage('Building image') {
      steps{
        script {
          sh '''docker build -t veer-project --build-arg GIT_COMMIT=$(git log -1 --format=%h) .'''
        }
      }
    }
   
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
         script {
                sh '''docker tag veer-project:latest 443244066224.dkr.ecr.ap-southeast-1.amazonaws.com/veer-project:$(git log -1 --format=%h)
                       docker tag veer-project:latest 443244066224.dkr.ecr.ap-southeast-1.amazonaws.com/veer-project:dev1'''           
                sh '''docker push 443244066224.dkr.ecr.ap-southeast-1.amazonaws.com/veer-project:$(git log -1 --format=%h)'''
                sh '''docker push 443244066224.dkr.ecr.ap-southeast-1.amazonaws.com/veer-project:dev1'''

         }
        }
      }
    }
    post {
        failure {
          slackSend channel: 'jenkins-alert', message: 'job failed', teamDomain: 'aatmaaniacademy', tokenCredentialId: 'b98e08a6-773d-42b3-adc3-051b691ba64d'
        }
    
        success {  
          slackSend channel: 'jenkins-alert', failOnError: true, message: 'Build failed  - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)', teamDomain: 'aatmaaniacademy', tokenCredentialId: 'b98e08a6-773d-42b3-adc3-051b691ba64d'
        }
    }
}
